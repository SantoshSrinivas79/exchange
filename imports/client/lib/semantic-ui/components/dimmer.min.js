!(function(e, i, n, t) {
    i = void 0 !== i && i.Math == Math ? i : typeof self !== 'undefined' && self.Math == Math ? self : Function('return this')(), e.fn.dimmer = function(i) {
        let o; const a = e(this); let r = (new Date()).getTime(); let s = []; const m = arguments[0]; const d = typeof m === 'string'; const c = [].slice.call(arguments, 1); return a.each(function() {
            let u; let l; let f; const g = e.isPlainObject(i) ? e.extend(!0, {}, e.fn.dimmer.settings, i) : e.extend({}, e.fn.dimmer.settings); const p = g.selector; const h = g.namespace; const b = g.className; const v = g.error; const y = `.${h}`; const C = `module-${h}`; const w = a.selector || ''; const S = 'ontouchstart' in n.documentElement ? 'touchstart' : 'click'; const T = e(this); const D = this; let N = T.data(C); (f = {
                preinitialize() { f.is.dimmer() ? (l = T.parent(), u = T) : (l = T, u = f.has.dimmer() ? g.dimmerName ? l.find(p.dimmer).filter(`.${g.dimmerName}`) : l.find(p.dimmer) : f.create(), f.set.variation()); },
                initialize() { f.debug('Initializing dimmer', g), f.bind.events(), f.set.dimmable(), f.instantiate(); },
                instantiate() { f.verbose('Storing instance of module', f), N = f, T.data(C, N); },
                destroy() { f.verbose('Destroying previous module', u), f.unbind.events(), f.remove.variation(), l.off(y); },
                bind: { events() { g.on == 'hover' ? l.on(`mouseenter${y}`, f.show).on(`mouseleave${y}`, f.hide) : g.on == 'click' && l.on(S + y, f.toggle), f.is.page() && (f.debug('Setting as a page dimmer', l), f.set.pageDimmer()), f.is.closable() && (f.verbose('Adding dimmer close event', u), l.on(S + y, p.dimmer, f.event.click)); } },
                unbind: { events() { T.removeData(C), l.off(y); } },
                event: { click(i) { f.verbose('Determining if event occured on dimmer', i), (u.find(i.target).length === 0 || e(i.target).is(p.content)) && (f.hide(), i.stopImmediatePropagation()); } },
                addContent(i) { const n = e(i); f.debug('Add content to dimmer', n), n.parent()[0] !== u[0] && n.detach().appendTo(u); },
                create() { const i = e(g.template.dimmer()); return g.dimmerName && (f.debug('Creating named dimmer', g.dimmerName), i.addClass(g.dimmerName)), i.appendTo(l), i; },
                show(i) { i = e.isFunction(i) ? i : function() {}, f.debug('Showing dimmer', u, g), f.is.dimmed() && !f.is.animating() || !f.is.enabled() ? f.debug('Dimmer is already shown or disabled') : (f.animate.show(i), g.onShow.call(D), g.onChange.call(D)); },
                hide(i) { i = e.isFunction(i) ? i : function() {}, f.is.dimmed() || f.is.animating() ? (f.debug('Hiding dimmer', u), f.animate.hide(i), g.onHide.call(D), g.onChange.call(D)) : f.debug('Dimmer is not visible'); },
                toggle() { f.verbose('Toggling dimmer visibility', u), f.is.dimmed() ? f.hide() : f.show(); },
                animate: {
                    show(i) {
                        i = e.isFunction(i) ? i : function() {}, g.useCSS && e.fn.transition !== t && u.transition('is supported') ? (g.opacity !== 'auto' && f.set.opacity(), u.transition({
                            displayType: 'flex', animation: `${g.transition} in`, queue: !1, duration: f.get.duration(), useFailSafe: !0, onStart() { f.set.dimmed(); }, onComplete() { f.set.active(), i(); },
                        })) : (f.verbose('Showing dimmer animation with javascript'), f.set.dimmed(), g.opacity == 'auto' && (g.opacity = 0.8), u.stop().css({ opacity: 0, width: '100%', height: '100%' }).fadeTo(f.get.duration(), g.opacity, function() { u.removeAttr('style'), f.set.active(), i(); }));
                    },
                    hide(i) {
                        i = e.isFunction(i) ? i : function() {}, g.useCSS && e.fn.transition !== t && u.transition('is supported') ? (f.verbose('Hiding dimmer with css'), u.transition({
                            displayType: 'flex', animation: `${g.transition} out`, queue: !1, duration: f.get.duration(), useFailSafe: !0, onStart() { f.remove.dimmed(); }, onComplete() { f.remove.active(), i(); },
                        })) : (f.verbose('Hiding dimmer with javascript'), f.remove.dimmed(), u.stop().fadeOut(f.get.duration(), function() { f.remove.active(), u.removeAttr('style'), i(); }));
                    },
                },
                get: { dimmer() { return u; }, duration() { return typeof g.duration === 'object' ? f.is.active() ? g.duration.hide : g.duration.show : g.duration; } },
                has: { dimmer() { return g.dimmerName ? T.find(p.dimmer).filter(`.${g.dimmerName}`).length > 0 : T.find(p.dimmer).length > 0; } },
                is: {
                    active() { return u.hasClass(b.active); }, animating() { return u.is(':animated') || u.hasClass(b.animating); }, closable() { return g.closable == 'auto' ? g.on != 'hover' : g.closable; }, dimmer() { return T.hasClass(b.dimmer); }, dimmable() { return T.hasClass(b.dimmable); }, dimmed() { return l.hasClass(b.dimmed); }, disabled() { return l.hasClass(b.disabled); }, enabled() { return !f.is.disabled(); }, page() { return l.is('body'); }, pageDimmer() { return u.hasClass(b.pageDimmer); },
                },
                can: { show() { return !u.hasClass(b.disabled); } },
                set: {
                    opacity(e) { let i = u.css('background-color'); const n = i.split(','); const t = n && n.length == 3; const o = n && n.length == 4; e = g.opacity === 0 ? 0 : g.opacity || e, t || o ? (n[3] = `${e})`, i = n.join(',')) : i = `rgba(0, 0, 0, ${e})`, f.debug('Setting opacity to', e), u.css('background-color', i); }, active() { u.addClass(b.active); }, dimmable() { l.addClass(b.dimmable); }, dimmed() { l.addClass(b.dimmed); }, pageDimmer() { u.addClass(b.pageDimmer); }, disabled() { u.addClass(b.disabled); }, variation(e) { (e = e || g.variation) && u.addClass(e); },
                },
                remove: {
                    active() { u.removeClass(b.active); }, dimmed() { l.removeClass(b.dimmed); }, disabled() { u.removeClass(b.disabled); }, variation(e) { (e = e || g.variation) && u.removeClass(e); },
                },
                setting(i, n) { if (f.debug('Changing setting', i, n), e.isPlainObject(i))e.extend(!0, g, i); else { if (n === t) return g[i]; e.isPlainObject(g[i]) ? e.extend(!0, g[i], n) : g[i] = n; } },
                internal(i, n) { if (e.isPlainObject(i))e.extend(!0, f, i); else { if (n === t) return f[i]; f[i] = n; } },
                debug() { !g.silent && g.debug && (g.performance ? f.performance.log(arguments) : (f.debug = Function.prototype.bind.call(console.info, console, `${g.name}:`), f.debug.apply(console, arguments))); },
                verbose() { !g.silent && g.verbose && g.debug && (g.performance ? f.performance.log(arguments) : (f.verbose = Function.prototype.bind.call(console.info, console, `${g.name}:`), f.verbose.apply(console, arguments))); },
                error() { g.silent || (f.error = Function.prototype.bind.call(console.error, console, `${g.name}:`), f.error.apply(console, arguments)); },
                performance: {
                    log(e) {
                        let i; let n; g.performance && (n = (i = (new Date()).getTime()) - (r || i), r = i, s.push({
                            Name: e[0], Arguments: [].slice.call(e, 1) || '', Element: D, 'Execution Time': n,
                        })), clearTimeout(f.performance.timer), f.performance.timer = setTimeout(f.performance.display, 500);
                    },
                    display() { let i = `${g.name}:`; let n = 0; r = !1, clearTimeout(f.performance.timer), e.each(s, function(e, i) { n += i['Execution Time']; }), i += ` ${n}ms`, w && (i += ` '${w}'`), a.length > 1 && (i += ` (${a.length})`), (console.group !== t || console.table !== t) && s.length > 0 && (console.groupCollapsed(i), console.table ? console.table(s) : e.each(s, function(e, i) { console.log(`${i.Name}: ${i['Execution Time']}ms`); }), console.groupEnd()), s = []; },
                },
                invoke(i, n, a) { let r; let s; let m; let d = N; return n = n || c, a = D || a, typeof i === 'string' && d !== t && (i = i.split(/[\. ]/), r = i.length - 1, e.each(i, function(n, o) { const a = n != r ? o + i[n + 1].charAt(0).toUpperCase() + i[n + 1].slice(1) : i; if (e.isPlainObject(d[a]) && n != r)d = d[a]; else { if (d[a] !== t) return s = d[a], !1; if (!e.isPlainObject(d[o]) || n == r) return d[o] !== t ? (s = d[o], !1) : (f.error(v.method, i), !1); d = d[o]; } })), e.isFunction(s) ? m = s.apply(a, n) : s !== t && (m = s), e.isArray(o) ? o.push(m) : o !== t ? o = [o, m] : m !== t && (o = m), s; },
            }).preinitialize(), d ? (N === t && f.initialize(), f.invoke(m)) : (N !== t && N.invoke('destroy'), f.initialize());
        }), o !== t ? o : this;
    }, e.fn.dimmer.settings = {
        name: 'Dimmer',
        namespace: 'dimmer',
        silent: !1,
        debug: !1,
        verbose: !1,
        performance: !0,
        dimmerName: !1,
        variation: !1,
        closable: 'auto',
        useCSS: !0,
        transition: 'fade',
        on: !1,
        opacity: 'auto',
        duration: { show: 500, hide: 500 },
        onChange() {},
        onShow() {},
        onHide() {},
        error: { method: 'The method you called is not defined.' },
        className: {
            active: 'active', animating: 'animating', dimmable: 'dimmable', dimmed: 'dimmed', dimmer: 'dimmer', disabled: 'disabled', hide: 'hide', pageDimmer: 'page', show: 'show',
        },
        selector: { dimmer: '> .ui.dimmer', content: '.ui.dimmer > .content, .ui.dimmer > .content > .center' },
        template: { dimmer() { return e('<div />').attr('class', 'ui dimmer'); } },
    };
}(jQuery, window, document));
