!(function(e, n, t, i) {
    n = void 0 !== n && n.Math == Math ? n : typeof self !== 'undefined' && self.Math == Math ? self : Function('return this')(), e.fn.rating = function(n) {
        let t; const a = e(this); const o = a.selector || ''; let r = (new Date()).getTime(); let s = []; const l = arguments[0]; const c = typeof l === 'string'; const u = [].slice.call(arguments, 1); return a.each(function() {
            let d; let g; const m = e.isPlainObject(n) ? e.extend(!0, {}, e.fn.rating.settings, n) : e.extend({}, e.fn.rating.settings); const f = m.namespace; const v = m.className; const p = m.metadata; const b = m.selector; const h = (m.error, `.${f}`); const y = `module-${f}`; const x = this; let R = e(this).data(y); const C = e(this); let T = C.find(b.icon); g = {
                initialize() { g.verbose('Initializing rating module', m), T.length === 0 && g.setup.layout(), m.interactive ? g.enable() : g.disable(), g.set.initialLoad(), g.set.rating(g.get.initialRating()), g.remove.initialLoad(), g.instantiate(); },
                instantiate() { g.verbose('Instantiating module', m), R = g, C.data(y, g); },
                destroy() { g.verbose('Destroying previous instance', R), g.remove.events(), C.removeData(y); },
                refresh() { T = C.find(b.icon); },
                setup: { layout() { const n = g.get.maxRating(); const t = e.fn.rating.settings.templates.icon(n); g.debug('Generating icon html dynamically'), C.html(t), g.refresh(); } },
                event: { mouseenter() { const n = e(this); n.nextAll().removeClass(v.selected), C.addClass(v.selected), n.addClass(v.selected).prevAll().addClass(v.selected); }, mouseleave() { C.removeClass(v.selected), T.removeClass(v.selected); }, click() { const n = e(this); const t = g.get.rating(); const i = T.index(n) + 1; (m.clearable == 'auto' ? T.length === 1 : m.clearable) && t == i ? g.clearRating() : g.set.rating(i); } },
                clearRating() { g.debug('Clearing current rating'), g.set.rating(0); },
                bind: { events() { g.verbose('Binding events'), C.on(`mouseenter${h}`, b.icon, g.event.mouseenter).on(`mouseleave${h}`, b.icon, g.event.mouseleave).on(`click${h}`, b.icon, g.event.click); } },
                remove: { events() { g.verbose('Removing events'), C.off(h); }, initialLoad() { d = !1; } },
                enable() { g.debug('Setting rating to interactive mode'), g.bind.events(), C.removeClass(v.disabled); },
                disable() { g.debug('Setting rating to read-only mode'), g.remove.events(), C.addClass(v.disabled); },
                is: { initialLoad() { return d; } },
                get: { initialRating() { return C.data(p.rating) !== i ? (C.removeData(p.rating), C.data(p.rating)) : m.initialRating; }, maxRating() { return C.data(p.maxRating) !== i ? (C.removeData(p.maxRating), C.data(p.maxRating)) : m.maxRating; }, rating() { const e = T.filter(`.${v.active}`).length; return g.verbose('Current rating retrieved', e), e; } },
                set: { rating(e) { const n = e - 1 >= 0 ? e - 1 : 0; const t = T.eq(n); C.removeClass(v.selected), T.removeClass(v.selected).removeClass(v.active), e > 0 && (g.verbose('Setting current rating to', e), t.prevAll().addBack().addClass(v.active)), g.is.initialLoad() || m.onRate.call(x, e); }, initialLoad() { d = !0; } },
                setting(n, t) { if (g.debug('Changing setting', n, t), e.isPlainObject(n))e.extend(!0, m, n); else { if (t === i) return m[n]; e.isPlainObject(m[n]) ? e.extend(!0, m[n], t) : m[n] = t; } },
                internal(n, t) { if (e.isPlainObject(n))e.extend(!0, g, n); else { if (t === i) return g[n]; g[n] = t; } },
                debug() { !m.silent && m.debug && (m.performance ? g.performance.log(arguments) : (g.debug = Function.prototype.bind.call(console.info, console, `${m.name}:`), g.debug.apply(console, arguments))); },
                verbose() { !m.silent && m.verbose && m.debug && (m.performance ? g.performance.log(arguments) : (g.verbose = Function.prototype.bind.call(console.info, console, `${m.name}:`), g.verbose.apply(console, arguments))); },
                error() { m.silent || (g.error = Function.prototype.bind.call(console.error, console, `${m.name}:`), g.error.apply(console, arguments)); },
                performance: {
                    log(e) {
                        let n; let t; m.performance && (t = (n = (new Date()).getTime()) - (r || n), r = n, s.push({
                            Name: e[0], Arguments: [].slice.call(e, 1) || '', Element: x, 'Execution Time': t,
                        })), clearTimeout(g.performance.timer), g.performance.timer = setTimeout(g.performance.display, 500);
                    },
                    display() { let n = `${m.name}:`; let t = 0; r = !1, clearTimeout(g.performance.timer), e.each(s, function(e, n) { t += n['Execution Time']; }), n += ` ${t}ms`, o && (n += ` '${o}'`), a.length > 1 && (n += ` (${a.length})`), (console.group !== i || console.table !== i) && s.length > 0 && (console.groupCollapsed(n), console.table ? console.table(s) : e.each(s, function(e, n) { console.log(`${n.Name}: ${n['Execution Time']}ms`); }), console.groupEnd()), s = []; },
                },
                invoke(n, a, o) { let r; let s; let l; let c = R; return a = a || u, o = x || o, typeof n === 'string' && c !== i && (n = n.split(/[\. ]/), r = n.length - 1, e.each(n, function(t, a) { const o = t != r ? a + n[t + 1].charAt(0).toUpperCase() + n[t + 1].slice(1) : n; if (e.isPlainObject(c[o]) && t != r)c = c[o]; else { if (c[o] !== i) return s = c[o], !1; if (!e.isPlainObject(c[a]) || t == r) return c[a] !== i && (s = c[a], !1); c = c[a]; } })), e.isFunction(s) ? l = s.apply(o, a) : s !== i && (l = s), e.isArray(t) ? t.push(l) : t !== i ? t = [t, l] : l !== i && (t = l), s; },
            }, c ? (R === i && g.initialize(), g.invoke(l)) : (R !== i && R.invoke('destroy'), g.initialize());
        }), t !== i ? t : this;
    }, e.fn.rating.settings = {
        name: 'Rating',
        namespace: 'rating',
        slent: !1,
        debug: !1,
        verbose: !1,
        performance: !0,
        initialRating: 0,
        interactive: !0,
        maxRating: 4,
        clearable: 'auto',
        fireOnInit: !1,
        onRate(e) {},
        error: { method: 'The method you called is not defined', noMaximum: 'No maximum rating specified. Cannot generate HTML automatically' },
        metadata: { rating: 'rating', maxRating: 'maxRating' },
        className: {
            active: 'active', disabled: 'disabled', selected: 'selected', loading: 'loading',
        },
        selector: { icon: '.icon' },
        templates: { icon(e) { for (var n = 1, t = ''; n <= e;)t += '<i class="icon"></i>', n++; return t; } },
    };
}(jQuery, window, document));
