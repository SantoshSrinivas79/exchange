!(function(e, n, o, t) {
    n = void 0 !== n && n.Math == Math ? n : typeof self !== 'undefined' && self.Math == Math ? self : Function('return this')(), e.fn.embed = function(o) {
        let r; const a = e(this); const i = a.selector || ''; let c = (new Date()).getTime(); let l = []; const d = arguments[0]; const u = typeof d === 'string'; const s = [].slice.call(arguments, 1); return a.each(function() {
            let m; const p = e.isPlainObject(o) ? e.extend(!0, {}, e.fn.embed.settings, o) : e.extend({}, e.fn.embed.settings); const f = p.selector; const h = p.className; const b = p.sources; const g = p.error; const v = p.metadata; const y = p.namespace; const w = p.templates; const P = `.${y}`; const C = `module-${y}`; const E = (e(n), e(this)); let U = (E.find(f.placeholder), E.find(f.icon), E.find(f.embed)); const j = this; let S = E.data(C); m = {
                initialize() { m.debug('Initializing embed'), m.determine.autoplay(), m.create(), m.bind.events(), m.instantiate(); },
                instantiate() { m.verbose('Storing instance of module', m), S = m, E.data(C, m); },
                destroy() { m.verbose('Destroying previous instance of embed'), m.reset(), E.removeData(C).off(P); },
                refresh() { m.verbose('Refreshing selector cache'), E.find(f.placeholder), E.find(f.icon), U = E.find(f.embed); },
                bind: { events() { m.has.placeholder() && (m.debug('Adding placeholder events'), E.on(`click${P}`, f.placeholder, m.createAndShow).on(`click${P}`, f.icon, m.createAndShow)); } },
                create() { m.get.placeholder() ? m.createPlaceholder() : m.createAndShow(); },
                createPlaceholder(e) { const n = m.get.icon(); const o = m.get.url(); m.generate.embed(o); e = e || m.get.placeholder(), E.html(w.placeholder(e, n)), m.debug('Creating placeholder for embed', e, n); },
                createEmbed(n) { m.refresh(), n = n || m.get.url(), U = e('<div/>').addClass(h.embed).html(m.generate.embed(n)).appendTo(E), p.onCreate.call(j, n), m.debug('Creating embed object', U); },
                changeEmbed(e) { U.html(m.generate.embed(e)); },
                createAndShow() { m.createEmbed(), m.show(); },
                change(e, n, o) { m.debug('Changing video to ', e, n, o), E.data(v.source, e).data(v.id, n), o ? E.data(v.url, o) : E.removeData(v.url), m.has.embed() ? m.changeEmbed() : m.create(); },
                reset() { m.debug('Clearing embed and showing placeholder'), m.remove.active(), m.remove.embed(), m.showPlaceholder(), p.onReset.call(j); },
                show() { m.debug('Showing embed'), m.set.active(), p.onDisplay.call(j); },
                hide() { m.debug('Hiding embed'), m.showPlaceholder(); },
                showPlaceholder() { m.debug('Showing placeholder image'), m.remove.active(), p.onPlaceholderDisplay.call(j); },
                get: {
                    id() { return p.id || E.data(v.id); }, placeholder() { return p.placeholder || E.data(v.placeholder); }, icon() { return p.icon ? p.icon : E.data(v.icon) !== t ? E.data(v.icon) : m.determine.icon(); }, source(e) { return p.source ? p.source : E.data(v.source) !== t ? E.data(v.source) : m.determine.source(); }, type() { const e = m.get.source(); return b[e] !== t && b[e].type; }, url() { return p.url ? p.url : E.data(v.url) !== t ? E.data(v.url) : m.determine.url(); },
                },
                determine: {
                    autoplay() { m.should.autoplay() && (p.autoplay = !0); }, source(n) { let o = !1; return (n = n || m.get.url()) && e.each(b, function(e, t) { if (n.search(t.domain) !== -1) return o = e, !1; }), o; }, icon() { const e = m.get.source(); return b[e] !== t && b[e].icon; }, url() { let e; const n = p.id || E.data(v.id); const o = p.source || E.data(v.source); return (e = b[o] !== t && b[o].url.replace('{id}', n)) && E.data(v.url, e), e; },
                },
                set: { active() { E.addClass(h.active); } },
                remove: { active() { E.removeClass(h.active); }, embed() { U.empty(); } },
                encode: { parameters(e) { let n; const o = []; for (n in e)o.push(`${encodeURIComponent(n)}=${encodeURIComponent(e[n])}`); return o.join('&amp;'); } },
                generate: { embed(e) { m.debug('Generating embed html'); let n; let o; const t = m.get.source(); return (e = m.get.url(e)) ? (o = m.generate.parameters(t), n = w.iframe(e, o)) : m.error(g.noURL, E), n; }, parameters(n, o) { let r = b[n] && b[n].parameters !== t ? b[n].parameters(p) : {}; return (o = o || p.parameters) && (r = e.extend({}, r, o)), r = p.onEmbed(r), m.encode.parameters(r); } },
                has: { embed() { return U.length > 0; }, placeholder() { return p.placeholder || E.data(v.placeholder); } },
                should: { autoplay() { return p.autoplay === 'auto' ? p.placeholder || E.data(v.placeholder) !== t : p.autoplay; } },
                is: { video() { return m.get.type() == 'video'; } },
                setting(n, o) { if (m.debug('Changing setting', n, o), e.isPlainObject(n))e.extend(!0, p, n); else { if (o === t) return p[n]; e.isPlainObject(p[n]) ? e.extend(!0, p[n], o) : p[n] = o; } },
                internal(n, o) { if (e.isPlainObject(n))e.extend(!0, m, n); else { if (o === t) return m[n]; m[n] = o; } },
                debug() { !p.silent && p.debug && (p.performance ? m.performance.log(arguments) : (m.debug = Function.prototype.bind.call(console.info, console, `${p.name}:`), m.debug.apply(console, arguments))); },
                verbose() { !p.silent && p.verbose && p.debug && (p.performance ? m.performance.log(arguments) : (m.verbose = Function.prototype.bind.call(console.info, console, `${p.name}:`), m.verbose.apply(console, arguments))); },
                error() { p.silent || (m.error = Function.prototype.bind.call(console.error, console, `${p.name}:`), m.error.apply(console, arguments)); },
                performance: {
                    log(e) {
                        let n; let o; p.performance && (o = (n = (new Date()).getTime()) - (c || n), c = n, l.push({
                            Name: e[0], Arguments: [].slice.call(e, 1) || '', Element: j, 'Execution Time': o,
                        })), clearTimeout(m.performance.timer), m.performance.timer = setTimeout(m.performance.display, 500);
                    },
                    display() { let n = `${p.name}:`; let o = 0; c = !1, clearTimeout(m.performance.timer), e.each(l, function(e, n) { o += n['Execution Time']; }), n += ` ${o}ms`, i && (n += ` '${i}'`), a.length > 1 && (n += ` (${a.length})`), (console.group !== t || console.table !== t) && l.length > 0 && (console.groupCollapsed(n), console.table ? console.table(l) : e.each(l, function(e, n) { console.log(`${n.Name}: ${n['Execution Time']}ms`); }), console.groupEnd()), l = []; },
                },
                invoke(n, o, a) { let i; let c; let l; let d = S; return o = o || s, a = j || a, typeof n === 'string' && d !== t && (n = n.split(/[\. ]/), i = n.length - 1, e.each(n, function(o, r) { const a = o != i ? r + n[o + 1].charAt(0).toUpperCase() + n[o + 1].slice(1) : n; if (e.isPlainObject(d[a]) && o != i)d = d[a]; else { if (d[a] !== t) return c = d[a], !1; if (!e.isPlainObject(d[r]) || o == i) return d[r] !== t ? (c = d[r], !1) : (m.error(g.method, n), !1); d = d[r]; } })), e.isFunction(c) ? l = c.apply(a, o) : c !== t && (l = c), e.isArray(r) ? r.push(l) : r !== t ? r = [r, l] : l !== t && (r = l), c; },
            }, u ? (S === t && m.initialize(), m.invoke(d)) : (S !== t && S.invoke('destroy'), m.initialize());
        }), r !== t ? r : this;
    }, e.fn.embed.settings = {
        name: 'Embed',
        namespace: 'embed',
        silent: !1,
        debug: !1,
        verbose: !1,
        performance: !0,
        icon: !1,
        source: !1,
        url: !1,
        id: !1,
        autoplay: 'auto',
        color: '#444444',
        hd: !0,
        brandedUI: !1,
        parameters: !1,
        onDisplay() {},
        onPlaceholderDisplay() {},
        onReset() {},
        onCreate(e) {},
        onEmbed(e) { return e; },
        metadata: {
            id: 'id', icon: 'icon', placeholder: 'placeholder', source: 'source', url: 'url',
        },
        error: { noURL: 'No URL specified', method: 'The method you called is not defined' },
        className: { active: 'active', embed: 'embed' },
        selector: { embed: '.embed', placeholder: '.placeholder', icon: '.icon' },
        sources: {
            youtube: {
                name: 'youtube',
                type: 'video',
                icon: 'video play',
                domain: 'youtube.com',
                url: '//www.youtube.com/embed/{id}',
                parameters(e) {
                    return {
                        autohide: !e.brandedUI, autoplay: e.autoplay, color: e.color || t, hq: e.hd, jsapi: e.api, modestbranding: !e.brandedUI,
                    };
                },
            },
            vimeo: {
                name: 'vimeo',
                type: 'video',
                icon: 'video play',
                domain: 'vimeo.com',
                url: '//player.vimeo.com/video/{id}',
                parameters(e) {
                    return {
                        api: e.api, autoplay: e.autoplay, byline: e.brandedUI, color: e.color || t, portrait: e.brandedUI, title: e.brandedUI,
                    };
                },
            },
        },
        templates: { iframe(e, n) { let o = e; return n && (o += `?${n}`), `<iframe src="${o}" width="100%" height="100%" frameborder="0" scrolling="no" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>`; }, placeholder(e, n) { let o = ''; return n && (o += `<i class="${n} icon"></i>`), e && (o += `<img class="placeholder" src="${e}">`), o; } },
        api: !1,
        onPause() {},
        onPlay() {},
        onStop() {},
    };
}(jQuery, window, document));
