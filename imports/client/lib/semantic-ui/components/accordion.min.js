!(function(e, n, t, i) {
    n = void 0 !== n && n.Math == Math ? n : typeof self !== 'undefined' && self.Math == Math ? self : Function('return this')(), e.fn.accordion = function(t) {
        let o; const a = e(this); let s = (new Date()).getTime(); let l = []; const r = arguments[0]; const c = typeof r === 'string'; const u = [].slice.call(arguments, 1); n.requestAnimationFrame || n.mozRequestAnimationFrame || n.webkitRequestAnimationFrame || n.msRequestAnimationFrame; return a.each(function() {
            let d; let g; const f = e.isPlainObject(t) ? e.extend(!0, {}, e.fn.accordion.settings, t) : e.extend({}, e.fn.accordion.settings); const m = f.className; const p = f.namespace; const h = f.selector; const v = f.error; const b = `.${p}`; const y = `module-${p}`; const C = a.selector || ''; const O = e(this); let x = O.find(h.title); let F = O.find(h.content); const A = this; let q = O.data(y); g = {
                initialize() { g.debug('Initializing', O), g.bind.events(), f.observeChanges && g.observeChanges(), g.instantiate(); },
                instantiate() { q = g, O.data(y, g); },
                destroy() { g.debug('Destroying previous instance', O), O.off(b).removeData(y); },
                refresh() { x = O.find(h.title), F = O.find(h.content); },
                observeChanges() { 'MutationObserver' in n && ((d = new MutationObserver(function(e) { g.debug('DOM tree modified, updating selector cache'), g.refresh(); })).observe(A, { childList: !0, subtree: !0 }), g.debug('Setting up mutation observer', d)); },
                bind: { events() { g.debug('Binding delegated events'), O.on(f.on + b, h.trigger, g.event.click); } },
                event: { click() { g.toggle.call(this); } },
                toggle(n) { const t = n !== i ? typeof n === 'number' ? x.eq(n) : e(n).closest(h.title) : e(this).closest(h.title); const o = t.next(F); const a = o.hasClass(m.animating); const s = o.hasClass(m.active); const l = s && !a; const r = !s && a; g.debug('Toggling visibility of content', t), l || r ? f.collapsible ? g.close.call(t) : g.debug('Cannot close accordion content collapsing is disabled') : g.open.call(t); },
                open(n) {
                    const t = n !== i ? typeof n === 'number' ? x.eq(n) : e(n).closest(h.title) : e(this).closest(h.title); const o = t.next(F); const a = o.hasClass(m.animating); o.hasClass(m.active) || a ? g.debug('Accordion already open, skipping', o) : (g.debug('Opening accordion content', t), f.onOpening.call(o), f.onChanging.call(o), f.exclusive && g.closeOthers.call(t), t.addClass(m.active), o.stop(!0, !0).addClass(m.animating), f.animateChildren && (e.fn.transition !== i && O.transition('is supported') ? o.children().transition({
                        animation: 'fade in', queue: !1, useFailSafe: !0, debug: f.debug, verbose: f.verbose, duration: f.duration,
                    }) : o.children().stop(!0, !0).animate({ opacity: 1 }, f.duration, g.resetOpacity)), o.slideDown(f.duration, f.easing, function() { o.removeClass(m.animating).addClass(m.active), g.reset.display.call(this), f.onOpen.call(this), f.onChange.call(this); }));
                },
                close(n) {
                    const t = n !== i ? typeof n === 'number' ? x.eq(n) : e(n).closest(h.title) : e(this).closest(h.title); const o = t.next(F); const a = o.hasClass(m.animating); const s = o.hasClass(m.active); !s && !(!s && a) || s && a || (g.debug('Closing accordion content', o), f.onClosing.call(o), f.onChanging.call(o), t.removeClass(m.active), o.stop(!0, !0).addClass(m.animating), f.animateChildren && (e.fn.transition !== i && O.transition('is supported') ? o.children().transition({
                        animation: 'fade out', queue: !1, useFailSafe: !0, debug: f.debug, verbose: f.verbose, duration: f.duration,
                    }) : o.children().stop(!0, !0).animate({ opacity: 0 }, f.duration, g.resetOpacity)), o.slideUp(f.duration, f.easing, function() { o.removeClass(m.animating).removeClass(m.active), g.reset.display.call(this), f.onClose.call(this), f.onChange.call(this); }));
                },
                closeOthers(n) {
                    let t; let o; let a; const s = n !== i ? x.eq(n) : e(this).closest(h.title); const l = s.parents(h.content).prev(h.title); const r = s.closest(h.accordion); const c = `${h.title}.${m.active}:visible`; const u = `${h.content}.${m.active}:visible`; f.closeNested ? a = (t = r.find(c).not(l)).next(F) : (t = r.find(c).not(l), o = r.find(u).find(c).not(l), a = (t = t.not(o)).next(F)), t.length > 0 && (g.debug('Exclusive enabled, closing other content', t), t.removeClass(m.active), a.removeClass(m.animating).stop(!0, !0), f.animateChildren && (e.fn.transition !== i && O.transition('is supported') ? a.children().transition({
                        animation: 'fade out', useFailSafe: !0, debug: f.debug, verbose: f.verbose, duration: f.duration,
                    }) : a.children().stop(!0, !0).animate({ opacity: 0 }, f.duration, g.resetOpacity)), a.slideUp(f.duration, f.easing, function() { e(this).removeClass(m.active), g.reset.display.call(this); }));
                },
                reset: { display() { g.verbose('Removing inline display from element', this), e(this).css('display', ''), e(this).attr('style') === '' && e(this).attr('style', '').removeAttr('style'); }, opacity() { g.verbose('Removing inline opacity from element', this), e(this).css('opacity', ''), e(this).attr('style') === '' && e(this).attr('style', '').removeAttr('style'); } },
                setting(n, t) { if (g.debug('Changing setting', n, t), e.isPlainObject(n))e.extend(!0, f, n); else { if (t === i) return f[n]; e.isPlainObject(f[n]) ? e.extend(!0, f[n], t) : f[n] = t; } },
                internal(n, t) { if (g.debug('Changing internal', n, t), t === i) return g[n]; e.isPlainObject(n) ? e.extend(!0, g, n) : g[n] = t; },
                debug() { !f.silent && f.debug && (f.performance ? g.performance.log(arguments) : (g.debug = Function.prototype.bind.call(console.info, console, `${f.name}:`), g.debug.apply(console, arguments))); },
                verbose() { !f.silent && f.verbose && f.debug && (f.performance ? g.performance.log(arguments) : (g.verbose = Function.prototype.bind.call(console.info, console, `${f.name}:`), g.verbose.apply(console, arguments))); },
                error() { f.silent || (g.error = Function.prototype.bind.call(console.error, console, `${f.name}:`), g.error.apply(console, arguments)); },
                performance: {
                    log(e) {
                        let n; let t; f.performance && (t = (n = (new Date()).getTime()) - (s || n), s = n, l.push({
                            Name: e[0], Arguments: [].slice.call(e, 1) || '', Element: A, 'Execution Time': t,
                        })), clearTimeout(g.performance.timer), g.performance.timer = setTimeout(g.performance.display, 500);
                    },
                    display() { let n = `${f.name}:`; let t = 0; s = !1, clearTimeout(g.performance.timer), e.each(l, function(e, n) { t += n['Execution Time']; }), n += ` ${t}ms`, C && (n += ` '${C}'`), (console.group !== i || console.table !== i) && l.length > 0 && (console.groupCollapsed(n), console.table ? console.table(l) : e.each(l, function(e, n) { console.log(`${n.Name}: ${n['Execution Time']}ms`); }), console.groupEnd()), l = []; },
                },
                invoke(n, t, a) { let s; let l; let r; let c = q; return t = t || u, a = A || a, typeof n === 'string' && c !== i && (n = n.split(/[\. ]/), s = n.length - 1, e.each(n, function(t, o) { const a = t != s ? o + n[t + 1].charAt(0).toUpperCase() + n[t + 1].slice(1) : n; if (e.isPlainObject(c[a]) && t != s)c = c[a]; else { if (c[a] !== i) return l = c[a], !1; if (!e.isPlainObject(c[o]) || t == s) return c[o] !== i ? (l = c[o], !1) : (g.error(v.method, n), !1); c = c[o]; } })), e.isFunction(l) ? r = l.apply(a, t) : l !== i && (r = l), e.isArray(o) ? o.push(r) : o !== i ? o = [o, r] : r !== i && (o = r), l; },
            }, c ? (q === i && g.initialize(), g.invoke(r)) : (q !== i && q.invoke('destroy'), g.initialize());
        }), o !== i ? o : this;
    }, e.fn.accordion.settings = {
        name: 'Accordion',
        namespace: 'accordion',
        silent: !1,
        debug: !1,
        verbose: !1,
        performance: !0,
        on: 'click',
        observeChanges: !0,
        exclusive: !0,
        collapsible: !0,
        closeNested: !1,
        animateChildren: !0,
        duration: 350,
        easing: 'easeOutQuad',
        onOpening() {},
        onClosing() {},
        onChanging() {},
        onOpen() {},
        onClose() {},
        onChange() {},
        error: { method: 'The method you called is not defined' },
        className: { active: 'active', animating: 'animating' },
        selector: {
            accordion: '.accordion', title: '.title', trigger: '.title', content: '.content',
        },
    }, e.extend(e.easing, { easeOutQuad(e, n, t, i, o) { return -i * (n /= o) * (n - 2) + t; } });
}(jQuery, window, document));
